//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity textEntity { get { return GetGroup(GameMatcher.Text).GetSingleEntity(); } }
    public TextComponent text { get { return textEntity.text; } }
    public bool hasText { get { return textEntity != null; } }

    public GameEntity SetText(string newText) {
        if (hasText) {
            throw new Entitas.EntitasException("Could not set Text!\n" + this + " already has an entity with TextComponent!",
                "You should check if the context already has a textEntity before setting it or use context.ReplaceText().");
        }
        var entity = CreateEntity();
        entity.AddText(newText);
        return entity;
    }

    public void ReplaceText(string newText) {
        var entity = textEntity;
        if (entity == null) {
            entity = SetText(newText);
        } else {
            entity.ReplaceText(newText);
        }
    }

    public void RemoveText() {
        textEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public TextComponent text { get { return (TextComponent)GetComponent(GameComponentLookup.Text); } }
    public bool hasText { get { return HasComponent(GameComponentLookup.Text); } }

    public void AddText(string newText) {
        var index = GameComponentLookup.Text;
        var component = CreateComponent<TextComponent>(index);
        component.text = newText;
        AddComponent(index, component);
    }

    public void ReplaceText(string newText) {
        var index = GameComponentLookup.Text;
        var component = CreateComponent<TextComponent>(index);
        component.text = newText;
        ReplaceComponent(index, component);
    }

    public void RemoveText() {
        RemoveComponent(GameComponentLookup.Text);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherText;

    public static Entitas.IMatcher<GameEntity> Text {
        get {
            if (_matcherText == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentLookup.Text);
                matcher.componentNames = GameComponentLookup.componentNames;
                _matcherText = matcher;
            }

            return _matcherText;
        }
    }
}
